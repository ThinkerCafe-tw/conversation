# GitLab CI/CD 配置（如果使用 GitLab）

stages:
  - test
  - build
  - deploy-staging
  - deploy-production

variables:
  PROJECT_ID: probable-axon-451311-e1
  SERVICE_NAME: frequency-bot
  REGION: asia-east1
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

# 快速失敗測試 - 確保基本功能正常
quick-tests:
  stage: test
  image: python:3.9
  script:
    - pip install -r requirements.txt
    - python tests/critical_flows.py
  only:
    - merge_requests
    - main
    - develop
  allow_failure: false

# 單元測試
unit-tests:
  stage: test
  image: python:3.9
  script:
    - pip install -r requirements.txt
    - pip install pytest pytest-cov
    - pytest tests/unit/ -v --junitxml=report.xml
  artifacts:
    reports:
      junit: report.xml
  coverage: '/TOTAL.*\s+(\d+%)$/'

# 整合測試
integration-tests:
  stage: test
  image: python:3.9
  services:
    - neo4j:5-community
    - redis:7-alpine
  variables:
    NEO4J_AUTH: neo4j/testpassword
    REDIS_HOST: redis
  script:
    - pip install -r requirements.txt
    - pytest tests/integration/ -v
  needs:
    - quick-tests

# 構建 Docker 映像
build:
  stage: build
  image: google/cloud-sdk:alpine
  services:
    - docker:dind
  before_script:
    - echo $GCP_SERVICE_KEY | base64 -d > ${HOME}/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
    - gcloud config set project $PROJECT_ID
  script:
    - gcloud builds submit --tag gcr.io/$PROJECT_ID/$SERVICE_NAME:$CI_COMMIT_SHA
  only:
    - main
    - develop

# 部署到測試環境
deploy-staging:
  stage: deploy-staging
  image: google/cloud-sdk:alpine
  before_script:
    - echo $GCP_SERVICE_KEY | base64 -d > ${HOME}/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
    - gcloud config set project $PROJECT_ID
  script:
    - |
      gcloud run deploy $SERVICE_NAME-staging \
        --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$CI_COMMIT_SHA \
        --region $REGION \
        --platform managed \
        --allow-unauthenticated
    - SERVICE_URL=$(gcloud run services describe $SERVICE_NAME-staging --region=$REGION --format='value(status.url)')
    - python tests/smoke_tests.py --url=$SERVICE_URL
  environment:
    name: staging
    url: https://$SERVICE_NAME-staging-$CI_PROJECT_ID.asia-east1.run.app
  only:
    - develop

# 部署到生產環境（需要手動批准）
deploy-production:
  stage: deploy-production
  image: google/cloud-sdk:alpine
  before_script:
    - echo $GCP_SERVICE_KEY | base64 -d > ${HOME}/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
    - gcloud config set project $PROJECT_ID
  script:
    - |
      gcloud run deploy $SERVICE_NAME \
        --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$CI_COMMIT_SHA \
        --region $REGION \
        --platform managed \
        --allow-unauthenticated
    - SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
    - python tests/production_tests.py --url=$SERVICE_URL
  environment:
    name: production
    url: https://$SERVICE_NAME-$CI_PROJECT_ID.asia-east1.run.app
  when: manual
  only:
    - main

# 自動回滾機制
rollback:
  stage: deploy-production
  image: google/cloud-sdk:alpine
  before_script:
    - echo $GCP_SERVICE_KEY | base64 -d > ${HOME}/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
    - gcloud config set project $PROJECT_ID
  script:
    - |
      echo "Rolling back to previous version..."
      gcloud run services update-traffic $SERVICE_NAME \
        --to-revisions=PRIOR=100 \
        --region=$REGION
  when: manual
  only:
    - main