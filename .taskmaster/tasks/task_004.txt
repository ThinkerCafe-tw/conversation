# Task ID: 4
# Title: 實現對話暫存系統
# Status: pending
# Dependencies: 1, 3
# Priority: high
# Description: 開發對話暫存系統，按時間順序暫時儲存過去一小時內經過匿名化處理的對話紀錄
# Details:
1. 使用 Redis Sorted Set 作為時間序列數據存儲，以時間戳作為分數
2. 為每個群組創建獨立的 Sorted Set，用於存儲該群組的對話記錄
3. 每條消息存儲為 JSON 字符串，包含假名、時間戳和文本內容
4. 設置 Redis 鍵的 TTL 為 70 分鐘，確保歷史消息自動過期
5. 實現獲取指定時間範圍內消息的函數
6. 確保消息存儲過程是原子的，避免數據不一致

代碼示例：
```typescript
async function storeMessage(groupId: string, pseudonym: string, text: string): Promise<void> {
  const key = `group:${groupId}:messages`;
  const timestamp = Date.now();
  const message = JSON.stringify({
    pseudonym,
    timestamp,
    text
  });
  
  // 將消息添加到 Sorted Set
  await redis.zadd(key, timestamp, message);
  // 設置 70 分鐘 TTL
  await redis.expire(key, 70 * 60);
}

async function getMessagesInTimeRange(groupId: string, startTime: number, endTime: number): Promise<any[]> {
  const key = `group:${groupId}:messages`;
  
  // 獲取指定時間範圍內的消息
  const messages = await redis.zrangebyscore(key, startTime, endTime);
  
  // 解析 JSON 字符串
  return messages.map(msg => JSON.parse(msg));
}
```

# Test Strategy:
1. 單元測試：確保消息按時間順序正確存儲
2. 單元測試：確保能夠正確獲取指定時間範圍內的消息
3. 集成測試：確認 Redis TTL 設置正確，歷史消息在 70 分鐘後自動過期
4. 性能測試：測試系統在高頻消息情況下的性能
5. 容量測試：評估 Redis 存儲大量消息的容量限制
