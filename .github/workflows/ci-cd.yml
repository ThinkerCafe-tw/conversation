name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: probable-axon-451311-e1
  SERVICE_NAME: frequency-bot
  REGION: asia-east1

jobs:
  # 第一階段：單元測試
  unit-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=. --cov-report=xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3

  # 第二階段：整合測試
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      neo4j:
        image: neo4j:5-community
        env:
          NEO4J_AUTH: neo4j/testpassword
        ports:
          - 7687:7687
          - 7474:7474
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
    
    - name: Wait for services
      run: |
        sleep 10
        curl -f http://localhost:7474 || exit 1
    
    - name: Run integration tests
      env:
        NEO4J_URI: neo4j://localhost:7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: testpassword
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        pytest tests/integration/ -v

  # 第三階段：關鍵功能測試
  critical-features-test:
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test critical user flows
      run: |
        python tests/critical_flows.py

  # 第四階段：構建 Docker 映像
  build:
    runs-on: ubuntu-latest
    needs: critical-features-test
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker
    
    - name: Build Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
        docker tag gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA gcr.io/$PROJECT_ID/$SERVICE_NAME:latest
    
    - name: Push to GCR
      run: |
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest

  # 第五階段：部署到測試環境
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to staging
      uses: google-github-actions/deploy-cloudrun@v1
      with:
        service: ${{ env.SERVICE_NAME }}-staging
        image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        region: ${{ env.REGION }}
        env_vars: |
          ENVIRONMENT=staging
    
    - name: Run smoke tests
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME-staging --region=$REGION --format='value(status.url)')
        python tests/smoke_tests.py --url=$SERVICE_URL

  # 第六階段：部署到生產環境
  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production
      uses: google-github-actions/deploy-cloudrun@v1
      with:
        service: ${{ env.SERVICE_NAME }}
        image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        region: ${{ env.REGION }}
    
    - name: Run production tests
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
        python tests/production_tests.py --url=$SERVICE_URL
    
    - name: Notify deployment
      if: success()
      run: |
        echo "Deployment successful! Version: $GITHUB_SHA"
    
    - name: Rollback on failure
      if: failure()
      run: |
        gcloud run services update-traffic $SERVICE_NAME --to-revisions=PRIOR=100 --region=$REGION